// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:149

#ifndef _TAO_IDL_SONARPROTOTYPESUPPORTC_KTGCFW_H_
#define _TAO_IDL_SONARPROTOTYPESUPPORTC_KTGCFW_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "dds/DCPS/ZeroCopySeq_T.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "sonarProtoC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DdsDcpsPublicationC.h"
#include "dds/DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsTopicC.h"
#include "dds/DdsDcpsTypeSupportExtC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 5 || TAO_MICRO_VERSION != 3
#error This file should be regenerated with TAO_IDL
#endif

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

namespace org
{

  // TAO_IDL - Generated from
  // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

  namespace omg
  {

    // TAO_IDL - Generated from
    // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

    namespace dds
    {

      // TAO_IDL - Generated from
      // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

      namespace SonarSimu
      {

        // TAO_IDL - Generated from
        // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:99

        typedef ::TAO::DCPS::ZeroCopyDataSeq< org::omg::dds::SonarSimu::SonarProtocol, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> SonarProtocolSeq;
        

        // TAO_IDL - Generated from
        // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLTYPESUPPORT__VAR_OUT_CH_)
#define _ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLTYPESUPPORT__VAR_OUT_CH_

        class SonarProtocolTypeSupport;
        typedef SonarProtocolTypeSupport *SonarProtocolTypeSupport_ptr;
        typedef TAO_Objref_Var_T<SonarProtocolTypeSupport> SonarProtocolTypeSupport_var;
        typedef TAO_Objref_Out_T<SonarProtocolTypeSupport> SonarProtocolTypeSupport_out;
        

#endif /* end #if !defined */

        // TAO_IDL - Generated from
        // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

        class  SonarProtocolTypeSupport
          : public virtual ::OpenDDS::DCPS::TypeSupport
        
        {
        public:

          // TAO_IDL - Generated from
          // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

          typedef SonarProtocolTypeSupport_ptr _ptr_type;
          typedef SonarProtocolTypeSupport_var _var_type;
          typedef SonarProtocolTypeSupport_out _out_type;

          // The static operations.
          static SonarProtocolTypeSupport_ptr _duplicate (SonarProtocolTypeSupport_ptr obj);

          static void _tao_release (SonarProtocolTypeSupport_ptr obj);

          static SonarProtocolTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
          static SonarProtocolTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
          static SonarProtocolTypeSupport_ptr _nil (void);

          // TAO_IDL - Generated from
          // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

          virtual ::CORBA::Boolean _is_a (const char *type_id);
          virtual const char* _interface_repository_id (void) const;
          virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
        
        protected:
          // Abstract or local interface only.
          SonarProtocolTypeSupport (void);

          

          virtual ~SonarProtocolTypeSupport (void);
        
        private:
          // Private and unimplemented for concrete interfaces.
          SonarProtocolTypeSupport (const SonarProtocolTypeSupport &);

          void operator= (const SonarProtocolTypeSupport &);
        };

        // TAO_IDL - Generated from
        // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLDATAWRITER__VAR_OUT_CH_)
#define _ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLDATAWRITER__VAR_OUT_CH_

        class SonarProtocolDataWriter;
        typedef SonarProtocolDataWriter *SonarProtocolDataWriter_ptr;
        typedef TAO_Objref_Var_T<SonarProtocolDataWriter> SonarProtocolDataWriter_var;
        typedef TAO_Objref_Out_T<SonarProtocolDataWriter> SonarProtocolDataWriter_out;
        

#endif /* end #if !defined */

        // TAO_IDL - Generated from
        // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

        class  SonarProtocolDataWriter
          : public virtual ::DDS::DataWriter
        
        {
        public:

          // TAO_IDL - Generated from
          // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

          typedef SonarProtocolDataWriter_ptr _ptr_type;
          typedef SonarProtocolDataWriter_var _var_type;
          typedef SonarProtocolDataWriter_out _out_type;

          // The static operations.
          static SonarProtocolDataWriter_ptr _duplicate (SonarProtocolDataWriter_ptr obj);

          static void _tao_release (SonarProtocolDataWriter_ptr obj);

          static SonarProtocolDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
          static SonarProtocolDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
          static SonarProtocolDataWriter_ptr _nil (void);

          virtual ::DDS::InstanceHandle_t register_instance (
            const ::org::omg::dds::SonarSimu::SonarProtocol & instance) = 0;

          virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
            const ::org::omg::dds::SonarSimu::SonarProtocol & instance,
            const ::DDS::Time_t & timestamp) = 0;

          virtual ::DDS::ReturnCode_t unregister_instance (
            const ::org::omg::dds::SonarSimu::SonarProtocol & instance,
            ::DDS::InstanceHandle_t handle) = 0;

          virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
            const ::org::omg::dds::SonarSimu::SonarProtocol & instance,
            ::DDS::InstanceHandle_t handle,
            const ::DDS::Time_t & timestamp) = 0;

          virtual ::DDS::ReturnCode_t write (
            const ::org::omg::dds::SonarSimu::SonarProtocol & instance_data,
            ::DDS::InstanceHandle_t handle) = 0;

          virtual ::DDS::ReturnCode_t write_w_timestamp (
            const ::org::omg::dds::SonarSimu::SonarProtocol & instance_data,
            ::DDS::InstanceHandle_t handle,
            const ::DDS::Time_t & source_timestamp) = 0;

          virtual ::DDS::ReturnCode_t dispose (
            const ::org::omg::dds::SonarSimu::SonarProtocol & instance_data,
            ::DDS::InstanceHandle_t instance_handle) = 0;

          virtual ::DDS::ReturnCode_t dispose_w_timestamp (
            const ::org::omg::dds::SonarSimu::SonarProtocol & instance_data,
            ::DDS::InstanceHandle_t instance_handle,
            const ::DDS::Time_t & source_timestamp) = 0;

          virtual ::DDS::ReturnCode_t get_key_value (
            ::org::omg::dds::SonarSimu::SonarProtocol & key_holder,
            ::DDS::InstanceHandle_t handle) = 0;

          virtual ::DDS::InstanceHandle_t lookup_instance (
            const ::org::omg::dds::SonarSimu::SonarProtocol & instance_data) = 0;

          // TAO_IDL - Generated from
          // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

          virtual ::CORBA::Boolean _is_a (const char *type_id);
          virtual const char* _interface_repository_id (void) const;
          virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
        
        protected:
          // Abstract or local interface only.
          SonarProtocolDataWriter (void);

          

          virtual ~SonarProtocolDataWriter (void);
        
        private:
          // Private and unimplemented for concrete interfaces.
          SonarProtocolDataWriter (const SonarProtocolDataWriter &);

          void operator= (const SonarProtocolDataWriter &);
        };

        // TAO_IDL - Generated from
        // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLDATAREADER__VAR_OUT_CH_)
#define _ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLDATAREADER__VAR_OUT_CH_

        class SonarProtocolDataReader;
        typedef SonarProtocolDataReader *SonarProtocolDataReader_ptr;
        typedef TAO_Objref_Var_T<SonarProtocolDataReader> SonarProtocolDataReader_var;
        typedef TAO_Objref_Out_T<SonarProtocolDataReader> SonarProtocolDataReader_out;
        

#endif /* end #if !defined */

        // TAO_IDL - Generated from
        // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

        class  SonarProtocolDataReader
          : public virtual ::OpenDDS::DCPS::DataReaderEx
        
        {
        public:

          // TAO_IDL - Generated from
          // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

          typedef SonarProtocolDataReader_ptr _ptr_type;
          typedef SonarProtocolDataReader_var _var_type;
          typedef SonarProtocolDataReader_out _out_type;

          // The static operations.
          static SonarProtocolDataReader_ptr _duplicate (SonarProtocolDataReader_ptr obj);

          static void _tao_release (SonarProtocolDataReader_ptr obj);

          static SonarProtocolDataReader_ptr _narrow (::CORBA::Object_ptr obj);
          static SonarProtocolDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
          static SonarProtocolDataReader_ptr _nil (void);

          virtual ::DDS::ReturnCode_t read (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & received_data,
            ::DDS::SampleInfoSeq & info_seq,
            ::CORBA::Long max_samples,
            ::DDS::SampleStateMask sample_states,
            ::DDS::ViewStateMask view_states,
            ::DDS::InstanceStateMask instance_states) = 0;

          virtual ::DDS::ReturnCode_t take (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & received_data,
            ::DDS::SampleInfoSeq & info_seq,
            ::CORBA::Long max_samples,
            ::DDS::SampleStateMask sample_states,
            ::DDS::ViewStateMask view_states,
            ::DDS::InstanceStateMask instance_states) = 0;

          virtual ::DDS::ReturnCode_t read_w_condition (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & data_values,
            ::DDS::SampleInfoSeq & sample_infos,
            ::CORBA::Long max_samples,
            ::DDS::ReadCondition_ptr a_condition) = 0;

          virtual ::DDS::ReturnCode_t take_w_condition (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & data_values,
            ::DDS::SampleInfoSeq & sample_infos,
            ::CORBA::Long max_samples,
            ::DDS::ReadCondition_ptr a_condition) = 0;

          virtual ::DDS::ReturnCode_t read_next_sample (
            ::org::omg::dds::SonarSimu::SonarProtocol & received_data,
            ::DDS::SampleInfo & sample_info) = 0;

          virtual ::DDS::ReturnCode_t take_next_sample (
            ::org::omg::dds::SonarSimu::SonarProtocol & received_data,
            ::DDS::SampleInfo & sample_info) = 0;

          virtual ::DDS::ReturnCode_t read_instance (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & received_data,
            ::DDS::SampleInfoSeq & info_seq,
            ::CORBA::Long max_samples,
            ::DDS::InstanceHandle_t a_handle,
            ::DDS::SampleStateMask sample_states,
            ::DDS::ViewStateMask view_states,
            ::DDS::InstanceStateMask instance_states) = 0;

          virtual ::DDS::ReturnCode_t take_instance (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & received_data,
            ::DDS::SampleInfoSeq & info_seq,
            ::CORBA::Long max_samples,
            ::DDS::InstanceHandle_t a_handle,
            ::DDS::SampleStateMask sample_states,
            ::DDS::ViewStateMask view_states,
            ::DDS::InstanceStateMask instance_states) = 0;

          virtual ::DDS::ReturnCode_t read_instance_w_condition (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & received_data,
            ::DDS::SampleInfoSeq & sample_infos,
            ::CORBA::Long max_samples,
            ::DDS::InstanceHandle_t a_handle,
            ::DDS::ReadCondition_ptr a_condition) = 0;

          virtual ::DDS::ReturnCode_t take_instance_w_condition (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & received_data,
            ::DDS::SampleInfoSeq & sample_infos,
            ::CORBA::Long max_samples,
            ::DDS::InstanceHandle_t a_handle,
            ::DDS::ReadCondition_ptr a_condition) = 0;

          virtual ::DDS::ReturnCode_t read_next_instance (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & received_data,
            ::DDS::SampleInfoSeq & info_seq,
            ::CORBA::Long max_samples,
            ::DDS::InstanceHandle_t a_handle,
            ::DDS::SampleStateMask sample_states,
            ::DDS::ViewStateMask view_states,
            ::DDS::InstanceStateMask instance_states) = 0;

          virtual ::DDS::ReturnCode_t take_next_instance (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & received_data,
            ::DDS::SampleInfoSeq & info_seq,
            ::CORBA::Long max_samples,
            ::DDS::InstanceHandle_t a_handle,
            ::DDS::SampleStateMask sample_states,
            ::DDS::ViewStateMask view_states,
            ::DDS::InstanceStateMask instance_states) = 0;

          virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & data_values,
            ::DDS::SampleInfoSeq & sample_infos,
            ::CORBA::Long max_samples,
            ::DDS::InstanceHandle_t previous_handle,
            ::DDS::ReadCondition_ptr a_condition) = 0;

          virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & data_values,
            ::DDS::SampleInfoSeq & sample_infos,
            ::CORBA::Long max_samples,
            ::DDS::InstanceHandle_t previous_handle,
            ::DDS::ReadCondition_ptr a_condition) = 0;

          virtual ::DDS::ReturnCode_t return_loan (
            ::org::omg::dds::SonarSimu::SonarProtocolSeq & received_data,
            ::DDS::SampleInfoSeq & info_seq) = 0;

          virtual ::DDS::ReturnCode_t get_key_value (
            ::org::omg::dds::SonarSimu::SonarProtocol & key_holder,
            ::DDS::InstanceHandle_t handle) = 0;

          virtual ::DDS::InstanceHandle_t lookup_instance (
            const ::org::omg::dds::SonarSimu::SonarProtocol & instance_data) = 0;

          // TAO_IDL - Generated from
          // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

          virtual ::CORBA::Boolean _is_a (const char *type_id);
          virtual const char* _interface_repository_id (void) const;
          virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
        
        protected:
          // Abstract or local interface only.
          SonarProtocolDataReader (void);

          

          virtual ~SonarProtocolDataReader (void);
        
        private:
          // Private and unimplemented for concrete interfaces.
          SonarProtocolDataReader (const SonarProtocolDataReader &);

          void operator= (const SonarProtocolDataReader &);
        };
      
      // TAO_IDL - Generated from
      // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64
      
      } // module org::omg::dds::SonarSimu
    
    // TAO_IDL - Generated from
    // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64
    
    } // module org::omg::dds
  
  // TAO_IDL - Generated from
  // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64
  
  } // module org::omg

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64

} // module org

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLTYPESUPPORT__TRAITS_)
#define _ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLTYPESUPPORT__TRAITS_

  template<>
  struct  Objref_Traits< ::org::omg::dds::SonarSimu::SonarProtocolTypeSupport>
  {
    static ::org::omg::dds::SonarSimu::SonarProtocolTypeSupport_ptr duplicate (
        ::org::omg::dds::SonarSimu::SonarProtocolTypeSupport_ptr p);
    static void release (
        ::org::omg::dds::SonarSimu::SonarProtocolTypeSupport_ptr p);
    static ::org::omg::dds::SonarSimu::SonarProtocolTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::org::omg::dds::SonarSimu::SonarProtocolTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLDATAWRITER__TRAITS_)
#define _ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLDATAWRITER__TRAITS_

  template<>
  struct  Objref_Traits< ::org::omg::dds::SonarSimu::SonarProtocolDataWriter>
  {
    static ::org::omg::dds::SonarSimu::SonarProtocolDataWriter_ptr duplicate (
        ::org::omg::dds::SonarSimu::SonarProtocolDataWriter_ptr p);
    static void release (
        ::org::omg::dds::SonarSimu::SonarProtocolDataWriter_ptr p);
    static ::org::omg::dds::SonarSimu::SonarProtocolDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::org::omg::dds::SonarSimu::SonarProtocolDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLDATAREADER__TRAITS_)
#define _ORG_OMG_DDS_SONARSIMU_SONARPROTOCOLDATAREADER__TRAITS_

  template<>
  struct  Objref_Traits< ::org::omg::dds::SonarSimu::SonarProtocolDataReader>
  {
    static ::org::omg::dds::SonarSimu::SonarProtocolDataReader_ptr duplicate (
        ::org::omg::dds::SonarSimu::SonarProtocolDataReader_ptr p);
    static void release (
        ::org::omg::dds::SonarSimu::SonarProtocolDataReader_ptr p);
    static ::org::omg::dds::SonarSimu::SonarProtocolDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::org::omg::dds::SonarSimu::SonarProtocolDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1686
#if defined (__ACE_INLINE__)
#include "sonarProtoTypeSupportC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

